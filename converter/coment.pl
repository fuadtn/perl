# Perl — высокоуровневый интерпретируемый динамический язык программирования.
# По синтаксису схож с С++, но имеет массу преимуществ: универсальные переменные, упрощенная структура функций и т.д.
# Здесь явное объявление переменной: my $var; (и неважно, строковая это переменная или целочисленная);
# Объявление массива: my @array;
# переменаая всегда начинается со знака доллара, массив с собаки @; 
# имеется множество модулей для работы с разными инструментами, подключаются с помощью команды use.

use strict;											# подключаем этот модуль (он запрещает использование переменных без явного объявления)
													# чтобы избежать проблем с опечатками в названии переменных;
use Spreadsheet::WriteExcel;						# этот модуль дает возможность работы с excel-файлами;

my $xname = 'People_02.xml';						# используем переменную для хранения названия xml-файла;
my $ename = 'Pacients.xls';							# используем переменную для объявления названия excel-файла;	
my $excel;											# используем переменную для хранения дескриптора на excel-файл;
my $list1;											# используем переменную для хранения дескриптора на лист excel-файла;
my $style;											# используем переменную для хранения стиля полей excel-файла;
my $tstyle;											# используем переменную для хранения стиля заголовков excel-файла;

my $title = " ";									# в этой переменной будем хранить очередное название поля (0-2,3-5..1,2,3..);
my $column = " ";									# в этой переменной будем хранить очередное название поля (0-2,3-5..1,2,3..);
my $field;											# в эту переменную будем считывать очередной тег (< ... />);
my $i = 1;
my $c;

my @db;												# массив, в ячейки которого и будем суммировать количество пациентов разного возраста;

$/ = ">";											# установим в качестве знака-разделителя '>', чтобы читать за раз один тег;
#xml file ------------------------------------
open xml, $xname or die "Couldn't open: $!\n";		# открываем xml-файл: xml - дескриптор для открываемого файла (далее касательно этого
													# файла работаем только с ним), имя открываемого файла или же (если открыть не получается) выйти с
													# сообщением "Couldn't open:" (а переменная $! - хранит причину ошибки);

#excel file ----------------------------------
$excel = Spreadsheet::WriteExcel->new($ename);		# создаем новый excel-файл и сохраняем его дескриптор в $excel;
$list1 = $excel->add_worksheet('pacients');			# создаем новый лист в excel-файле и сохраняем его дескриптор в $list1;

$style = $excel->add_format(align=>'right');		# создаем стиль для полей таблицы;
$style->set_bg_color('silver');						# цвет_фона - серебряный;
$style->set_border();								# установить границы для полей

$tstyle = $excel->add_format(align=>'right');		# создаем стиль для полей заголовков;
$tstyle->set_bg_color('cyan');						
$tstyle->set_bold();								# использовать жирный шрифт;
$tstyle->set_border();

$list1->write("A1", "Age", $tstyle);				# записываем в таблицу заголовки
$list1->write("B1", "Amount", $tstyle);				# формат: (ячейка для записи, строка для записи, стиль)

while ($field = <xml>)								# читаем xml-файл до конца (очередной тег считываем в переменную $field)
{
	if ($field =~ /agecaption="(\d+)/)				# смотрим, если в теге встретилась конструкция agecaption="???", то 
	{
		$column = $1;								# содержимое ??? этого поля сохраняем в переменную $column;
													# $1 - это переменная - специфика регулярных выражений /agecaption="(\d+)/ = /agecaption="($1)/
		if ($field =~ /agecaption="(\d+-\d+)/)		# если встретившийся возраст < 1 года, то
		{
			$column = "$1 m";						# изменим его вид: (2-3, 4-5, 6-8 ..)->(2-3 m, 4-5 m ..)
		}
	}
	
	if($column ne $title)							# если очередной считанный возраст не содержится в таблице excel, то 
	{
		$title = $column;
		$i++;										# 1) перейдем к следующей ячейке массива, куда будем суммировать пациентов
		@db[$i] = 0;								# 2) занулим эту ячейку	
		$list1->write("A$i", $title, $style);		# 3) добавим в таблицу очередной возраст;
													
													# следующие 4 строки использкем для красивого вывода процесса работы в консоль
		seek (xml, 0, 1);							# в файле xml установили указатель на текущее положение (второй аргумент - смещение, третий аргумент:
													# 0 - от начала, 1 - от текущего положения, 2 - от конца);
		print "Been read bytes..........";
		print tell();								# функция tell возвращает позицию указателя (количество уже считанных байтов)
		print "\n";
	}

	if ($field =~ /cntpeople="(\d+)"/)				# ищем в теге конструкцию, отвечающую за количество пациентов, 
	{
		@db[$i] += $1;								# и прибавляем это число в ячейку с пациентами этого же возраста;
	}
}

for($c = 2; $c <= $i; $c++)							# после того, как все пациенты посчитаны, а их количество занесено в массив, 
{
	$list1->write("B$c", @db[$c], $style);			# занесем данные в excel-таблицу.
}

print "Done.....................ok";
exit;